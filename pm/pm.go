// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sat, 10 Sep 2016 16:45:06 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package pm

/*
#cgo LDFLAGS: -lportmidi
#include "portmidi.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// Initialize function as declared in pm/portmidi.h:153
func Initialize() Error {
	__ret := C.Pm_Initialize()
	__v := (Error)(__ret)
	return __v
}

// Terminate function as declared in pm/portmidi.h:159
func Terminate() Error {
	__ret := C.Pm_Terminate()
	__v := (Error)(__ret)
	return __v
}

// HasHostError function as declared in pm/portmidi.h:180
func HasHostError(stream *PortMidiStream) int32 {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	__ret := C.Pm_HasHostError(cstream)
	__v := (int32)(__ret)
	return __v
}

// GetErrorText function as declared in pm/portmidi.h:187
func GetErrorText(errnum Error) string {
	cerrnum, _ := (C.PmError)(errnum), cgoAllocsUnknown
	__ret := C.Pm_GetErrorText(cerrnum)
	__v := packPCharString(__ret)
	return __v
}

// GetHostErrorText function as declared in pm/portmidi.h:193
func GetHostErrorText(msg []byte, len uint32) {
	cmsg, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&msg)).Data)), cgoAllocsUnknown
	clen, _ := (C.uint)(len), cgoAllocsUnknown
	C.Pm_GetHostErrorText(cmsg, clen)
}

// CountDevices function as declared in pm/portmidi.h:218
func CountDevices() int32 {
	__ret := C.Pm_CountDevices()
	__v := (int32)(__ret)
	return __v
}

// GetDefaultInputDeviceID function as declared in pm/portmidi.h:261
func GetDefaultInputDeviceID() DeviceID {
	__ret := C.Pm_GetDefaultInputDeviceID()
	__v := (DeviceID)(__ret)
	return __v
}

// GetDefaultOutputDeviceID function as declared in pm/portmidi.h:263
func GetDefaultOutputDeviceID() DeviceID {
	__ret := C.Pm_GetDefaultOutputDeviceID()
	__v := (DeviceID)(__ret)
	return __v
}

// GetDeviceInfo function as declared in pm/portmidi.h:287
func GetDeviceInfo(id DeviceID) *DeviceInfo {
	cid, _ := (C.PmDeviceID)(id), cgoAllocsUnknown
	__ret := C.Pm_GetDeviceInfo(cid)
	__v := NewDeviceInfoRef(unsafe.Pointer(__ret))
	return __v
}

// OpenInput function as declared in pm/portmidi.h:353
func OpenInput(stream **PortMidiStream, inputDevice DeviceID, inputDriverInfo unsafe.Pointer, bufferSize int32, timeProc TimeProcPtr, timeInfo unsafe.Pointer) Error {
	cstream, _ := (*unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cinputDevice, _ := (C.PmDeviceID)(inputDevice), cgoAllocsUnknown
	cinputDriverInfo, _ := (unsafe.Pointer)(unsafe.Pointer(inputDriverInfo)), cgoAllocsUnknown
	cbufferSize, _ := (C.int32_t)(bufferSize), cgoAllocsUnknown
	ctimeProc, _ := timeProc.PassValue()
	ctimeInfo, _ := (unsafe.Pointer)(unsafe.Pointer(timeInfo)), cgoAllocsUnknown
	__ret := C.Pm_OpenInput(cstream, cinputDevice, cinputDriverInfo, cbufferSize, ctimeProc, ctimeInfo)
	__v := (Error)(__ret)
	return __v
}

// OpenOutput function as declared in pm/portmidi.h:360
func OpenOutput(stream **PortMidiStream, outputDevice DeviceID, outputDriverInfo unsafe.Pointer, bufferSize int32, timeProc TimeProcPtr, timeInfo unsafe.Pointer, latency int32) Error {
	cstream, _ := (*unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	coutputDevice, _ := (C.PmDeviceID)(outputDevice), cgoAllocsUnknown
	coutputDriverInfo, _ := (unsafe.Pointer)(unsafe.Pointer(outputDriverInfo)), cgoAllocsUnknown
	cbufferSize, _ := (C.int32_t)(bufferSize), cgoAllocsUnknown
	ctimeProc, _ := timeProc.PassValue()
	ctimeInfo, _ := (unsafe.Pointer)(unsafe.Pointer(timeInfo)), cgoAllocsUnknown
	clatency, _ := (C.int32_t)(latency), cgoAllocsUnknown
	__ret := C.Pm_OpenOutput(cstream, coutputDevice, coutputDriverInfo, cbufferSize, ctimeProc, ctimeInfo, clatency)
	__v := (Error)(__ret)
	return __v
}

// SetFilter function as declared in pm/portmidi.h:434
func SetFilter(stream *PortMidiStream, filters int32) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cfilters, _ := (C.int32_t)(filters), cgoAllocsUnknown
	__ret := C.Pm_SetFilter(cstream, cfilters)
	__v := (Error)(__ret)
	return __v
}

// SetChannelMask function as declared in pm/portmidi.h:452
func SetChannelMask(stream *PortMidiStream, mask int32) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cmask, _ := (C.int)(mask), cgoAllocsUnknown
	__ret := C.Pm_SetChannelMask(cstream, cmask)
	__v := (Error)(__ret)
	return __v
}

// Abort function as declared in pm/portmidi.h:462
func Abort(stream *PortMidiStream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	__ret := C.Pm_Abort(cstream)
	__v := (Error)(__ret)
	return __v
}

// Close function as declared in pm/portmidi.h:469
func Close(stream *PortMidiStream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	__ret := C.Pm_Close(cstream)
	__v := (Error)(__ret)
	return __v
}

// Synchronize function as declared in pm/portmidi.h:494
func Synchronize(stream *PortMidiStream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	__ret := C.Pm_Synchronize(cstream)
	__v := (Error)(__ret)
	return __v
}

// Read function as declared in pm/portmidi.h:613
func Read(stream *PortMidiStream, buffer []Event, length int32) int32 {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cbuffer, _ := unpackArgSEvent(buffer)
	clength, _ := (C.int32_t)(length), cgoAllocsUnknown
	__ret := C.Pm_Read(cstream, cbuffer, clength)
	packSEvent(buffer, cbuffer)
	__v := (int32)(__ret)
	return __v
}

// Poll function as declared in pm/portmidi.h:619
func Poll(stream *PortMidiStream) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	__ret := C.Pm_Poll(cstream)
	__v := (Error)(__ret)
	return __v
}

// Write function as declared in pm/portmidi.h:634
func Write(stream *PortMidiStream, buffer []Event, length int32) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cbuffer, _ := unpackArgSEvent(buffer)
	clength, _ := (C.int32_t)(length), cgoAllocsUnknown
	__ret := C.Pm_Write(cstream, cbuffer, clength)
	packSEvent(buffer, cbuffer)
	__v := (Error)(__ret)
	return __v
}

// WriteShort function as declared in pm/portmidi.h:642
func WriteShort(stream *PortMidiStream, when Timestamp, msg int32) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cwhen, _ := (C.PmTimestamp)(when), cgoAllocsUnknown
	cmsg, _ := (C.int32_t)(msg), cgoAllocsUnknown
	__ret := C.Pm_WriteShort(cstream, cwhen, cmsg)
	__v := (Error)(__ret)
	return __v
}

// WriteSysEx function as declared in pm/portmidi.h:647
func WriteSysEx(stream *PortMidiStream, when Timestamp, msg []byte) Error {
	cstream, _ := (unsafe.Pointer)(unsafe.Pointer(stream)), cgoAllocsUnknown
	cwhen, _ := (C.PmTimestamp)(when), cgoAllocsUnknown
	cmsg, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&msg)).Data)), cgoAllocsUnknown
	__ret := C.Pm_WriteSysEx(cstream, cwhen, cmsg)
	__v := (Error)(__ret)
	return __v
}
