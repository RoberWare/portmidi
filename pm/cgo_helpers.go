// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sat, 10 Sep 2016 16:45:06 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package pm

/*
#cgo LDFLAGS: -lportmidi
#include "portmidi.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocDeviceInfoMemory allocates memory for type C.PmDeviceInfo in C.
// The caller is responsible for freeing the this memory via C.free.
func allocDeviceInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfDeviceInfoValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfDeviceInfoValue = unsafe.Sizeof([1]C.PmDeviceInfo{})

// unpackPCharString represents the data from Go string as *C.char and avoids copying.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.char)(unsafe.Pointer(h.Data)), cgoAllocsUnknown
}

type stringHeader struct {
	Data uintptr
	Len  int
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = uintptr(unsafe.Pointer(p))
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - h.Data)
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(unsafe.Pointer(h.Data)), C.int(h.Len))
}

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *DeviceInfo) Ref() *C.PmDeviceInfo {
	if x == nil {
		return nil
	}
	return x.refbc1771f0
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *DeviceInfo) Free() {
	if x != nil && x.allocsbc1771f0 != nil {
		x.allocsbc1771f0.(*cgoAllocMap).Free()
		x.refbc1771f0 = nil
	}
}

// NewDeviceInfoRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewDeviceInfoRef(ref unsafe.Pointer) *DeviceInfo {
	if ref == nil {
		return nil
	}
	obj := new(DeviceInfo)
	obj.refbc1771f0 = (*C.PmDeviceInfo)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *DeviceInfo) PassRef() (*C.PmDeviceInfo, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refbc1771f0 != nil {
		return x.refbc1771f0, nil
	}
	membc1771f0 := allocDeviceInfoMemory(1)
	refbc1771f0 := (*C.PmDeviceInfo)(membc1771f0)
	allocsbc1771f0 := new(cgoAllocMap)
	var cstructVersion_allocs *cgoAllocMap
	refbc1771f0.structVersion, cstructVersion_allocs = (C.int)(x.StructVersion), cgoAllocsUnknown
	allocsbc1771f0.Borrow(cstructVersion_allocs)

	var cinterf_allocs *cgoAllocMap
	refbc1771f0.interf, cinterf_allocs = unpackPCharString(x.Interf)
	allocsbc1771f0.Borrow(cinterf_allocs)

	var cname_allocs *cgoAllocMap
	refbc1771f0.name, cname_allocs = unpackPCharString(x.Name)
	allocsbc1771f0.Borrow(cname_allocs)

	var cinput_allocs *cgoAllocMap
	refbc1771f0.input, cinput_allocs = (C.int)(x.Input), cgoAllocsUnknown
	allocsbc1771f0.Borrow(cinput_allocs)

	var coutput_allocs *cgoAllocMap
	refbc1771f0.output, coutput_allocs = (C.int)(x.Output), cgoAllocsUnknown
	allocsbc1771f0.Borrow(coutput_allocs)

	var copened_allocs *cgoAllocMap
	refbc1771f0.opened, copened_allocs = (C.int)(x.Opened), cgoAllocsUnknown
	allocsbc1771f0.Borrow(copened_allocs)

	x.refbc1771f0 = refbc1771f0
	x.allocsbc1771f0 = allocsbc1771f0
	return refbc1771f0, allocsbc1771f0

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x DeviceInfo) PassValue() (C.PmDeviceInfo, *cgoAllocMap) {
	if x.refbc1771f0 != nil {
		return *x.refbc1771f0, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *DeviceInfo) Deref() {
	if x.refbc1771f0 == nil {
		return
	}
	x.StructVersion = (int32)(x.refbc1771f0.structVersion)
	x.Interf = packPCharString(x.refbc1771f0.interf)
	x.Name = packPCharString(x.refbc1771f0.name)
	x.Input = (int32)(x.refbc1771f0.input)
	x.Output = (int32)(x.refbc1771f0.output)
	x.Opened = (int32)(x.refbc1771f0.opened)
}

func (x TimeProcPtr) PassRef() (ref *C.PmTimeProcPtr, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if timeProcPtrAE9B2A7BFunc == nil {
		timeProcPtrAE9B2A7BFunc = x
	}
	return (*C.PmTimeProcPtr)(C.PmTimeProcPtr_ae9b2a7b), nil
}

func (x TimeProcPtr) PassValue() (ref C.PmTimeProcPtr, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if timeProcPtrAE9B2A7BFunc == nil {
		timeProcPtrAE9B2A7BFunc = x
	}
	return (C.PmTimeProcPtr)(C.PmTimeProcPtr_ae9b2a7b), nil
}

//export timeProcPtrAE9B2A7B
func timeProcPtrAE9B2A7B(ctimeInfo unsafe.Pointer) C.PmTimestamp {
	if timeProcPtrAE9B2A7BFunc != nil {
		timeInfoae9b2a7b := (unsafe.Pointer)(unsafe.Pointer(ctimeInfo))
		retae9b2a7b := timeProcPtrAE9B2A7BFunc(timeInfoae9b2a7b)
		ret, _ := (C.PmTimestamp)(retae9b2a7b), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var timeProcPtrAE9B2A7BFunc TimeProcPtr

// allocEventMemory allocates memory for type C.PmEvent in C.
// The caller is responsible for freeing the this memory via C.free.
func allocEventMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfEventValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfEventValue = unsafe.Sizeof([1]C.PmEvent{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Event) Ref() *C.PmEvent {
	if x == nil {
		return nil
	}
	return x.ref369ef8f3
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Event) Free() {
	if x != nil && x.allocs369ef8f3 != nil {
		x.allocs369ef8f3.(*cgoAllocMap).Free()
		x.ref369ef8f3 = nil
	}
}

// NewEventRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewEventRef(ref unsafe.Pointer) *Event {
	if ref == nil {
		return nil
	}
	obj := new(Event)
	obj.ref369ef8f3 = (*C.PmEvent)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Event) PassRef() (*C.PmEvent, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref369ef8f3 != nil {
		return x.ref369ef8f3, nil
	}
	mem369ef8f3 := allocEventMemory(1)
	ref369ef8f3 := (*C.PmEvent)(mem369ef8f3)
	allocs369ef8f3 := new(cgoAllocMap)
	var cmessage_allocs *cgoAllocMap
	ref369ef8f3.message, cmessage_allocs = (C.PmMessage)(x.Message), cgoAllocsUnknown
	allocs369ef8f3.Borrow(cmessage_allocs)

	var ctimestamp_allocs *cgoAllocMap
	ref369ef8f3.timestamp, ctimestamp_allocs = (C.PmTimestamp)(x.Timestamp), cgoAllocsUnknown
	allocs369ef8f3.Borrow(ctimestamp_allocs)

	x.ref369ef8f3 = ref369ef8f3
	x.allocs369ef8f3 = allocs369ef8f3
	return ref369ef8f3, allocs369ef8f3

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Event) PassValue() (C.PmEvent, *cgoAllocMap) {
	if x.ref369ef8f3 != nil {
		return *x.ref369ef8f3, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Event) Deref() {
	if x.ref369ef8f3 == nil {
		return
	}
	x.Message = (Message)(x.ref369ef8f3.message)
	x.Timestamp = (Timestamp)(x.ref369ef8f3.timestamp)
}

type sliceHeader struct {
	Data uintptr
	Len  int
	Cap  int
}

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackArgSEvent transforms a sliced Go data structure into plain C format.
func unpackArgSEvent(x []Event) (unpacked *C.PmEvent, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(&unpacked, func(**C.PmEvent) {
		go allocs.Free()
	})

	len0 := len(x)
	mem0 := allocEventMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: uintptr(mem0),
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.PmEvent)(unsafe.Pointer(h0))
	for i0 := range x {
		v0[i0], _ = x[i0].PassValue()
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.PmEvent)(unsafe.Pointer(h.Data))
	return
}

// packSEvent reads sliced Go data structure out from plain C format.
func packSEvent(v []Event, ptr0 *C.PmEvent) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfEventValue]C.PmEvent)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewEventRef(unsafe.Pointer(&ptr1))
	}
}
